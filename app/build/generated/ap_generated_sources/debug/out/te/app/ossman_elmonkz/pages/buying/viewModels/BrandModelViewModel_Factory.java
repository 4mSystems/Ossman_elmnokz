// Generated by Dagger (https://dagger.dev).
package te.app.ossman_elmonkz.pages.buying.viewModels;

import dagger.internal.Factory;
import javax.inject.Provider;
import te.app.ossman_elmonkz.repository.BuyingRepository;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BrandModelViewModel_Factory implements Factory<BrandModelViewModel> {
  private final Provider<BuyingRepository> buyingRepositoryProvider;

  private final Provider<BuyingRepository> buyingRepositoryProvider2;

  public BrandModelViewModel_Factory(Provider<BuyingRepository> buyingRepositoryProvider,
      Provider<BuyingRepository> buyingRepositoryProvider2) {
    this.buyingRepositoryProvider = buyingRepositoryProvider;
    this.buyingRepositoryProvider2 = buyingRepositoryProvider2;
  }

  @Override
  public BrandModelViewModel get() {
    BrandModelViewModel instance = newInstance(buyingRepositoryProvider.get());
    BrandModelViewModel_MembersInjector.injectBuyingRepository(instance, buyingRepositoryProvider2.get());
    return instance;
  }

  public static BrandModelViewModel_Factory create(
      Provider<BuyingRepository> buyingRepositoryProvider,
      Provider<BuyingRepository> buyingRepositoryProvider2) {
    return new BrandModelViewModel_Factory(buyingRepositoryProvider, buyingRepositoryProvider2);
  }

  public static BrandModelViewModel newInstance(BuyingRepository buyingRepository) {
    return new BrandModelViewModel(buyingRepository);
  }
}
