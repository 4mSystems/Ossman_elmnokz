// Generated by Dagger (https://dagger.dev).
package te.app.mezzastore.base;

import androidx.lifecycle.MutableLiveData;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;
import te.app.mezzastore.activity.BaseActivity;
import te.app.mezzastore.activity.MainActivity;
import te.app.mezzastore.activity.MainActivity_MembersInjector;
import te.app.mezzastore.connection.Api;
import te.app.mezzastore.connection.ConnectionHelper;
import te.app.mezzastore.connection.ConnectionHelper_Factory;
import te.app.mezzastore.connection.ConnectionModule;
import te.app.mezzastore.connection.ConnectionModule_WebServiceFactory;
import te.app.mezzastore.model.base.Mutable;
import te.app.mezzastore.pages.home.HomeFragment;
import te.app.mezzastore.pages.home.HomeFragment_MembersInjector;
import te.app.mezzastore.pages.home.viewModels.HomeViewModel;
import te.app.mezzastore.pages.splash.SplashFragment;
import te.app.mezzastore.pages.splash.SplashFragment_MembersInjector;
import te.app.mezzastore.pages.splash.SplashViewModel;
import te.app.mezzastore.pages.splash.SplashViewModel_Factory;
import te.app.mezzastore.pages.splash.SplashViewModel_MembersInjector;
import te.app.mezzastore.pages.subCategories.SubCategoriesFragment;
import te.app.mezzastore.pages.subCategories.SubCategoriesFragment_MembersInjector;
import te.app.mezzastore.pages.subCategories.viewModels.SubCategoriesViewModel;
import te.app.mezzastore.repository.AuthRepository;
import te.app.mezzastore.repository.AuthRepository_Factory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIApplicationComponent implements IApplicationComponent {
  private Provider<MutableLiveData<Mutable>> getMutableLiveDataProvider;

  private Provider<Api> webServiceProvider;

  private Provider<ConnectionHelper> connectionHelperProvider;

  private Provider<AuthRepository> authRepositoryProvider;

  private DaggerIApplicationComponent(ConnectionModule connectionModuleParam,
      LiveData liveDataParam) {

    initialize(connectionModuleParam, liveDataParam);
  }

  public static IApplicationComponent.Builder builder() {
    return new Builder();
  }

  public static IApplicationComponent create() {
    return new Builder().build();
  }

  private SplashViewModel splashViewModel() {
    return injectSplashViewModel(SplashViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ConnectionModule connectionModuleParam,
      final LiveData liveDataParam) {
    this.getMutableLiveDataProvider = DoubleCheck.provider(LiveData_GetMutableLiveDataFactory.create(liveDataParam));
    this.webServiceProvider = DoubleCheck.provider(ConnectionModule_WebServiceFactory.create(connectionModuleParam));
    this.connectionHelperProvider = DoubleCheck.provider(ConnectionHelper_Factory.create(webServiceProvider, webServiceProvider));
    this.authRepositoryProvider = DoubleCheck.provider(AuthRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(BaseActivity tmpActivity) {
  }

  @Override
  public void inject(SplashFragment splashFragment) {
    injectSplashFragment(splashFragment);
  }

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);
  }

  @Override
  public void inject(SubCategoriesFragment subCategoriesFragment) {
    injectSubCategoriesFragment(subCategoriesFragment);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectLiveData(instance, getMutableLiveDataProvider.get());
    return instance;
  }

  private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
    SplashViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectViewModel(instance, splashViewModel());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModel(instance, new HomeViewModel());
    return instance;
  }

  private SubCategoriesFragment injectSubCategoriesFragment(SubCategoriesFragment instance) {
    SubCategoriesFragment_MembersInjector.injectViewModel(instance, new SubCategoriesViewModel());
    return instance;
  }

  private static final class Builder implements IApplicationComponent.Builder {
    @Override
    public IApplicationComponent build() {
      return new DaggerIApplicationComponent(new ConnectionModule(), new LiveData());
    }
  }
}
