// Generated by Dagger (https://dagger.dev).
package te.app.mezzastore.base;

import androidx.lifecycle.MutableLiveData;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;
import te.app.mezzastore.activity.BaseActivity;
import te.app.mezzastore.activity.MainActivity;
import te.app.mezzastore.activity.MainActivity_MembersInjector;
import te.app.mezzastore.connection.Api;
import te.app.mezzastore.connection.ConnectionHelper;
import te.app.mezzastore.connection.ConnectionHelper_Factory;
import te.app.mezzastore.connection.ConnectionModule;
import te.app.mezzastore.connection.ConnectionModule_WebServiceFactory;
import te.app.mezzastore.model.base.Mutable;
import te.app.mezzastore.pages.cart.CartFragment;
import te.app.mezzastore.pages.cart.CartFragment_MembersInjector;
import te.app.mezzastore.pages.cart.CreateOrderFragment;
import te.app.mezzastore.pages.cart.CreateOrderFragment_MembersInjector;
import te.app.mezzastore.pages.cart.viewModels.CartViewModel;
import te.app.mezzastore.pages.cart.viewModels.CreateOrderViewModel;
import te.app.mezzastore.pages.favorites.FavoritesFragment;
import te.app.mezzastore.pages.favorites.FavoritesFragment_MembersInjector;
import te.app.mezzastore.pages.favorites.viewModels.FavoritesViewModel;
import te.app.mezzastore.pages.home.HomeFragment;
import te.app.mezzastore.pages.home.HomeFragment_MembersInjector;
import te.app.mezzastore.pages.home.viewModels.HomeViewModel;
import te.app.mezzastore.pages.home.viewModels.HomeViewModel_Factory;
import te.app.mezzastore.pages.home.viewModels.HomeViewModel_MembersInjector;
import te.app.mezzastore.pages.products.ProductDetailsFragment;
import te.app.mezzastore.pages.products.ProductDetailsFragment_MembersInjector;
import te.app.mezzastore.pages.products.ProductsFragment;
import te.app.mezzastore.pages.products.ProductsFragment_MembersInjector;
import te.app.mezzastore.pages.products.viewModels.ProductDetailsViewModel;
import te.app.mezzastore.pages.products.viewModels.ProductDetailsViewModel_Factory;
import te.app.mezzastore.pages.products.viewModels.ProductDetailsViewModel_MembersInjector;
import te.app.mezzastore.pages.products.viewModels.ProductsViewModel;
import te.app.mezzastore.pages.products.viewModels.ProductsViewModel_Factory;
import te.app.mezzastore.pages.products.viewModels.ProductsViewModel_MembersInjector;
import te.app.mezzastore.pages.splash.SplashFragment;
import te.app.mezzastore.pages.splash.SplashFragment_MembersInjector;
import te.app.mezzastore.pages.splash.SplashViewModel;
import te.app.mezzastore.pages.splash.SplashViewModel_Factory;
import te.app.mezzastore.pages.splash.SplashViewModel_MembersInjector;
import te.app.mezzastore.pages.subCategories.SubCategoriesFragment;
import te.app.mezzastore.pages.subCategories.SubCategoriesFragment_MembersInjector;
import te.app.mezzastore.pages.subCategories.viewModels.SubCategoriesViewModel;
import te.app.mezzastore.pages.subCategories.viewModels.SubCategoriesViewModel_Factory;
import te.app.mezzastore.pages.subCategories.viewModels.SubCategoriesViewModel_MembersInjector;
import te.app.mezzastore.repository.HomeRepository;
import te.app.mezzastore.repository.HomeRepository_Factory;
import te.app.mezzastore.repository.ProductRepository;
import te.app.mezzastore.repository.ProductRepository_Factory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIApplicationComponent implements IApplicationComponent {
  private Provider<MutableLiveData<Mutable>> getMutableLiveDataProvider;

  private Provider<Api> webServiceProvider;

  private Provider<ConnectionHelper> connectionHelperProvider;

  private Provider<HomeRepository> homeRepositoryProvider;

  private Provider<ProductRepository> productRepositoryProvider;

  private DaggerIApplicationComponent(ConnectionModule connectionModuleParam,
      LiveData liveDataParam) {

    initialize(connectionModuleParam, liveDataParam);
  }

  public static IApplicationComponent.Builder builder() {
    return new Builder();
  }

  public static IApplicationComponent create() {
    return new Builder().build();
  }

  private SplashViewModel splashViewModel() {
    return injectSplashViewModel(SplashViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private HomeViewModel homeViewModel() {
    return injectHomeViewModel(HomeViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private SubCategoriesViewModel subCategoriesViewModel() {
    return injectSubCategoriesViewModel(SubCategoriesViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private ProductsViewModel productsViewModel() {
    return injectProductsViewModel(ProductsViewModel_Factory.newInstance(productRepositoryProvider.get()));
  }

  private ProductDetailsViewModel productDetailsViewModel() {
    return injectProductDetailsViewModel(ProductDetailsViewModel_Factory.newInstance(productRepositoryProvider.get()));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ConnectionModule connectionModuleParam,
      final LiveData liveDataParam) {
    this.getMutableLiveDataProvider = DoubleCheck.provider(LiveData_GetMutableLiveDataFactory.create(liveDataParam));
    this.webServiceProvider = DoubleCheck.provider(ConnectionModule_WebServiceFactory.create(connectionModuleParam));
    this.connectionHelperProvider = DoubleCheck.provider(ConnectionHelper_Factory.create(webServiceProvider, webServiceProvider));
    this.homeRepositoryProvider = DoubleCheck.provider(HomeRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.productRepositoryProvider = DoubleCheck.provider(ProductRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(BaseActivity tmpActivity) {
  }

  @Override
  public void inject(SplashFragment splashFragment) {
    injectSplashFragment(splashFragment);
  }

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);
  }

  @Override
  public void inject(SubCategoriesFragment subCategoriesFragment) {
    injectSubCategoriesFragment(subCategoriesFragment);
  }

  @Override
  public void inject(ProductsFragment productsFragment) {
    injectProductsFragment(productsFragment);
  }

  @Override
  public void inject(ProductDetailsFragment productDetailsFragment) {
    injectProductDetailsFragment(productDetailsFragment);
  }

  @Override
  public void inject(CartFragment cartFragment) {
    injectCartFragment(cartFragment);
  }

  @Override
  public void inject(CreateOrderFragment createOrderFragment) {
    injectCreateOrderFragment(createOrderFragment);
  }

  @Override
  public void inject(FavoritesFragment favoritesFragment) {
    injectFavoritesFragment(favoritesFragment);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectLiveData(instance, getMutableLiveDataProvider.get());
    return instance;
  }

  private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
    SplashViewModel_MembersInjector.injectRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectViewModel(instance, splashViewModel());
    return instance;
  }

  private HomeViewModel injectHomeViewModel(HomeViewModel instance) {
    HomeViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModel(instance, homeViewModel());
    return instance;
  }

  private SubCategoriesViewModel injectSubCategoriesViewModel(SubCategoriesViewModel instance) {
    SubCategoriesViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private SubCategoriesFragment injectSubCategoriesFragment(SubCategoriesFragment instance) {
    SubCategoriesFragment_MembersInjector.injectViewModel(instance, subCategoriesViewModel());
    return instance;
  }

  private ProductsViewModel injectProductsViewModel(ProductsViewModel instance) {
    ProductsViewModel_MembersInjector.injectProductRepository(instance, productRepositoryProvider.get());
    return instance;
  }

  private ProductsFragment injectProductsFragment(ProductsFragment instance) {
    ProductsFragment_MembersInjector.injectViewModel(instance, productsViewModel());
    return instance;
  }

  private ProductDetailsViewModel injectProductDetailsViewModel(ProductDetailsViewModel instance) {
    ProductDetailsViewModel_MembersInjector.injectProductRepository(instance, productRepositoryProvider.get());
    return instance;
  }

  private ProductDetailsFragment injectProductDetailsFragment(ProductDetailsFragment instance) {
    ProductDetailsFragment_MembersInjector.injectViewModel(instance, productDetailsViewModel());
    return instance;
  }

  private CartFragment injectCartFragment(CartFragment instance) {
    CartFragment_MembersInjector.injectViewModel(instance, new CartViewModel());
    return instance;
  }

  private CreateOrderFragment injectCreateOrderFragment(CreateOrderFragment instance) {
    CreateOrderFragment_MembersInjector.injectViewModel(instance, new CreateOrderViewModel());
    return instance;
  }

  private FavoritesFragment injectFavoritesFragment(FavoritesFragment instance) {
    FavoritesFragment_MembersInjector.injectViewModel(instance, new FavoritesViewModel());
    return instance;
  }

  private static final class Builder implements IApplicationComponent.Builder {
    @Override
    public IApplicationComponent build() {
      return new DaggerIApplicationComponent(new ConnectionModule(), new LiveData());
    }
  }
}
