// Generated by Dagger (https://dagger.dev).
package te.app.ossman_elmonkz.base;

import dagger.internal.DoubleCheck;
import javax.inject.Provider;
import te.app.ossman_elmonkz.activity.BaseActivity;
import te.app.ossman_elmonkz.activity.MainActivity;
import te.app.ossman_elmonkz.activity.MainActivity_MembersInjector;
import te.app.ossman_elmonkz.connection.Api;
import te.app.ossman_elmonkz.connection.ConnectionHelper;
import te.app.ossman_elmonkz.connection.ConnectionHelper_Factory;
import te.app.ossman_elmonkz.connection.ConnectionModule;
import te.app.ossman_elmonkz.connection.ConnectionModule_WebServiceFactory;
import te.app.ossman_elmonkz.pages.agentsAndClients.AgentsFragment;
import te.app.ossman_elmonkz.pages.agentsAndClients.AgentsFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.agentsAndClients.ClientsFragment;
import te.app.ossman_elmonkz.pages.agentsAndClients.ClientsFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.agentsAndClients.viewModels.AgentsClientsViewModel;
import te.app.ossman_elmonkz.pages.agentsAndClients.viewModels.AgentsClientsViewModel_Factory;
import te.app.ossman_elmonkz.pages.agentsAndClients.viewModels.AgentsClientsViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.buying.BuyingFragment;
import te.app.ossman_elmonkz.pages.buying.BuyingFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.buying.viewModels.BuyingViewModel;
import te.app.ossman_elmonkz.pages.cart.CartFragment;
import te.app.ossman_elmonkz.pages.cart.CartFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.cart.CreateOrderFragment;
import te.app.ossman_elmonkz.pages.cart.CreateOrderFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.cart.viewModels.CartViewModel;
import te.app.ossman_elmonkz.pages.cart.viewModels.CreateOrderViewModel;
import te.app.ossman_elmonkz.pages.cart.viewModels.CreateOrderViewModel_Factory;
import te.app.ossman_elmonkz.pages.cart.viewModels.CreateOrderViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.gallery.GalleryFragment;
import te.app.ossman_elmonkz.pages.gallery.GalleryFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.gallery.viewModels.GalleryViewModel;
import te.app.ossman_elmonkz.pages.gallery.viewModels.GalleryViewModel_Factory;
import te.app.ossman_elmonkz.pages.gallery.viewModels.GalleryViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.home.HomeFragment;
import te.app.ossman_elmonkz.pages.home.HomeFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.home.viewModels.HomeViewModel;
import te.app.ossman_elmonkz.pages.home.viewModels.HomeViewModel_Factory;
import te.app.ossman_elmonkz.pages.home.viewModels.HomeViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.more.MoreFragment;
import te.app.ossman_elmonkz.pages.more.MoreFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.more.viewModels.MoreViewModel;
import te.app.ossman_elmonkz.pages.more.viewModels.MoreViewModel_Factory;
import te.app.ossman_elmonkz.pages.more.viewModels.MoreViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.products.ProductsFragment;
import te.app.ossman_elmonkz.pages.products.ProductsFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.products.viewModels.ProductsViewModel;
import te.app.ossman_elmonkz.pages.products.viewModels.ProductsViewModel_Factory;
import te.app.ossman_elmonkz.pages.products.viewModels.ProductsViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.settings.AboutAppFragment;
import te.app.ossman_elmonkz.pages.settings.AboutAppFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.settings.ContactFragment;
import te.app.ossman_elmonkz.pages.settings.ContactFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.settings.SuggestionsFragment;
import te.app.ossman_elmonkz.pages.settings.SuggestionsFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.settings.viewModels.SettingsViewModel;
import te.app.ossman_elmonkz.pages.settings.viewModels.SettingsViewModel_Factory;
import te.app.ossman_elmonkz.pages.settings.viewModels.SettingsViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.splash.SplashFragment;
import te.app.ossman_elmonkz.pages.splash.SplashFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.splash.SplashViewModel;
import te.app.ossman_elmonkz.pages.splash.SplashViewModel_Factory;
import te.app.ossman_elmonkz.pages.splash.SplashViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.subCategories.SubCategoriesFragment;
import te.app.ossman_elmonkz.pages.subCategories.SubCategoriesFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.subCategories.SubCategorySearchFragment;
import te.app.ossman_elmonkz.pages.subCategories.SubCategorySearchFragment_MembersInjector;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesSearchViewModel;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesSearchViewModel_Factory;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesSearchViewModel_MembersInjector;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesViewModel;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesViewModel_Factory;
import te.app.ossman_elmonkz.pages.subCategories.viewModels.SubCategoriesViewModel_MembersInjector;
import te.app.ossman_elmonkz.repository.HomeRepository;
import te.app.ossman_elmonkz.repository.HomeRepository_Factory;
import te.app.ossman_elmonkz.repository.ProductRepository;
import te.app.ossman_elmonkz.repository.ProductRepository_Factory;
import te.app.ossman_elmonkz.repository.SettingsRepository;
import te.app.ossman_elmonkz.repository.SettingsRepository_Factory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIApplicationComponent implements IApplicationComponent {
  private Provider<Api> webServiceProvider;

  private Provider<ConnectionHelper> connectionHelperProvider;

  private Provider<HomeRepository> homeRepositoryProvider;

  private Provider<ProductRepository> productRepositoryProvider;

  private Provider<SettingsRepository> settingsRepositoryProvider;

  private DaggerIApplicationComponent(ConnectionModule connectionModuleParam) {

    initialize(connectionModuleParam);
  }

  public static IApplicationComponent.Builder builder() {
    return new Builder();
  }

  public static IApplicationComponent create() {
    return new Builder().build();
  }

  private HomeViewModel homeViewModel() {
    return injectHomeViewModel(HomeViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private SplashViewModel splashViewModel() {
    return injectSplashViewModel(SplashViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private SubCategoriesViewModel subCategoriesViewModel() {
    return injectSubCategoriesViewModel(SubCategoriesViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private ProductsViewModel productsViewModel() {
    return injectProductsViewModel(ProductsViewModel_Factory.newInstance(productRepositoryProvider.get()));
  }

  private GalleryViewModel galleryViewModel() {
    return injectGalleryViewModel(GalleryViewModel_Factory.newInstance(productRepositoryProvider.get()));
  }

  private CreateOrderViewModel createOrderViewModel() {
    return injectCreateOrderViewModel(CreateOrderViewModel_Factory.newInstance(productRepositoryProvider.get()));
  }

  private SettingsViewModel settingsViewModel() {
    return injectSettingsViewModel(SettingsViewModel_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  private SubCategoriesSearchViewModel subCategoriesSearchViewModel() {
    return injectSubCategoriesSearchViewModel(SubCategoriesSearchViewModel_Factory.newInstance(homeRepositoryProvider.get()));
  }

  private AgentsClientsViewModel agentsClientsViewModel() {
    return injectAgentsClientsViewModel(AgentsClientsViewModel_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  private MoreViewModel moreViewModel() {
    return injectMoreViewModel(MoreViewModel_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ConnectionModule connectionModuleParam) {
    this.webServiceProvider = DoubleCheck.provider(ConnectionModule_WebServiceFactory.create(connectionModuleParam));
    this.connectionHelperProvider = DoubleCheck.provider(ConnectionHelper_Factory.create(webServiceProvider, webServiceProvider));
    this.homeRepositoryProvider = DoubleCheck.provider(HomeRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.productRepositoryProvider = DoubleCheck.provider(ProductRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.settingsRepositoryProvider = DoubleCheck.provider(SettingsRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(BaseActivity tmpActivity) {
  }

  @Override
  public void inject(SplashFragment splashFragment) {
    injectSplashFragment(splashFragment);
  }

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);
  }

  @Override
  public void inject(SubCategoriesFragment subCategoriesFragment) {
    injectSubCategoriesFragment(subCategoriesFragment);
  }

  @Override
  public void inject(ProductsFragment productsFragment) {
    injectProductsFragment(productsFragment);
  }

  @Override
  public void inject(GalleryFragment galleryFragment) {
    injectGalleryFragment(galleryFragment);
  }

  @Override
  public void inject(CartFragment cartFragment) {
    injectCartFragment(cartFragment);
  }

  @Override
  public void inject(CreateOrderFragment createOrderFragment) {
    injectCreateOrderFragment(createOrderFragment);
  }

  @Override
  public void inject(BuyingFragment favoritesFragment) {
    injectBuyingFragment(favoritesFragment);
  }

  @Override
  public void inject(SuggestionsFragment contactUsFragment) {
    injectSuggestionsFragment(contactUsFragment);
  }

  @Override
  public void inject(SubCategorySearchFragment subCategorySearchFragment) {
    injectSubCategorySearchFragment(subCategorySearchFragment);
  }

  @Override
  public void inject(AgentsFragment agentsFragment) {
    injectAgentsFragment(agentsFragment);
  }

  @Override
  public void inject(ClientsFragment clientsFragment) {
    injectClientsFragment(clientsFragment);
  }

  @Override
  public void inject(ContactFragment contactFragment) {
    injectContactFragment(contactFragment);
  }

  @Override
  public void inject(AboutAppFragment aboutAppFragment) {
    injectAboutAppFragment(aboutAppFragment);
  }

  @Override
  public void inject(MoreFragment moreFragment) {
    injectMoreFragment(moreFragment);
  }

  private HomeViewModel injectHomeViewModel(HomeViewModel instance) {
    HomeViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModel(instance, homeViewModel());
    return instance;
  }

  private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
    SplashViewModel_MembersInjector.injectRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectViewModel(instance, splashViewModel());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModel(instance, homeViewModel());
    return instance;
  }

  private SubCategoriesViewModel injectSubCategoriesViewModel(SubCategoriesViewModel instance) {
    SubCategoriesViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private SubCategoriesFragment injectSubCategoriesFragment(SubCategoriesFragment instance) {
    SubCategoriesFragment_MembersInjector.injectViewModel(instance, subCategoriesViewModel());
    return instance;
  }

  private ProductsViewModel injectProductsViewModel(ProductsViewModel instance) {
    ProductsViewModel_MembersInjector.injectProductRepository(instance, productRepositoryProvider.get());
    return instance;
  }

  private ProductsFragment injectProductsFragment(ProductsFragment instance) {
    ProductsFragment_MembersInjector.injectViewModel(instance, productsViewModel());
    return instance;
  }

  private GalleryViewModel injectGalleryViewModel(GalleryViewModel instance) {
    GalleryViewModel_MembersInjector.injectProductRepository(instance, productRepositoryProvider.get());
    return instance;
  }

  private GalleryFragment injectGalleryFragment(GalleryFragment instance) {
    GalleryFragment_MembersInjector.injectViewModel(instance, galleryViewModel());
    return instance;
  }

  private CartFragment injectCartFragment(CartFragment instance) {
    CartFragment_MembersInjector.injectViewModel(instance, new CartViewModel());
    return instance;
  }

  private CreateOrderViewModel injectCreateOrderViewModel(CreateOrderViewModel instance) {
    CreateOrderViewModel_MembersInjector.injectProductRepository(instance, productRepositoryProvider.get());
    return instance;
  }

  private CreateOrderFragment injectCreateOrderFragment(CreateOrderFragment instance) {
    CreateOrderFragment_MembersInjector.injectViewModel(instance, createOrderViewModel());
    return instance;
  }

  private BuyingFragment injectBuyingFragment(BuyingFragment instance) {
    BuyingFragment_MembersInjector.injectViewModel(instance, new BuyingViewModel());
    return instance;
  }

  private SettingsViewModel injectSettingsViewModel(SettingsViewModel instance) {
    SettingsViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private SuggestionsFragment injectSuggestionsFragment(SuggestionsFragment instance) {
    SuggestionsFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private SubCategoriesSearchViewModel injectSubCategoriesSearchViewModel(
      SubCategoriesSearchViewModel instance) {
    SubCategoriesSearchViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private SubCategorySearchFragment injectSubCategorySearchFragment(
      SubCategorySearchFragment instance) {
    SubCategorySearchFragment_MembersInjector.injectViewModel(instance, subCategoriesSearchViewModel());
    return instance;
  }

  private AgentsClientsViewModel injectAgentsClientsViewModel(AgentsClientsViewModel instance) {
    AgentsClientsViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private AgentsFragment injectAgentsFragment(AgentsFragment instance) {
    AgentsFragment_MembersInjector.injectViewModel(instance, agentsClientsViewModel());
    return instance;
  }

  private ClientsFragment injectClientsFragment(ClientsFragment instance) {
    ClientsFragment_MembersInjector.injectViewModel(instance, agentsClientsViewModel());
    return instance;
  }

  private ContactFragment injectContactFragment(ContactFragment instance) {
    ContactFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private AboutAppFragment injectAboutAppFragment(AboutAppFragment instance) {
    AboutAppFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private MoreViewModel injectMoreViewModel(MoreViewModel instance) {
    MoreViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private MoreFragment injectMoreFragment(MoreFragment instance) {
    MoreFragment_MembersInjector.injectViewModel(instance, moreViewModel());
    return instance;
  }

  private static final class Builder implements IApplicationComponent.Builder {
    @Override
    public IApplicationComponent build() {
      return new DaggerIApplicationComponent(new ConnectionModule());
    }
  }
}
