// Generated by Dagger (https://dagger.dev).
package apps.app.altcompany.pages.myWorks.viewModels;

import apps.app.altcompany.repository.AuthRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyWorksViewModel_Factory implements Factory<MyWorksViewModel> {
  private final Provider<AuthRepository> ordersRepositoryProvider;

  private final Provider<AuthRepository> ordersRepositoryProvider2;

  public MyWorksViewModel_Factory(Provider<AuthRepository> ordersRepositoryProvider,
      Provider<AuthRepository> ordersRepositoryProvider2) {
    this.ordersRepositoryProvider = ordersRepositoryProvider;
    this.ordersRepositoryProvider2 = ordersRepositoryProvider2;
  }

  @Override
  public MyWorksViewModel get() {
    MyWorksViewModel instance = newInstance(ordersRepositoryProvider.get());
    MyWorksViewModel_MembersInjector.injectOrdersRepository(instance, ordersRepositoryProvider2.get());
    return instance;
  }

  public static MyWorksViewModel_Factory create(Provider<AuthRepository> ordersRepositoryProvider,
      Provider<AuthRepository> ordersRepositoryProvider2) {
    return new MyWorksViewModel_Factory(ordersRepositoryProvider, ordersRepositoryProvider2);
  }

  public static MyWorksViewModel newInstance(AuthRepository ordersRepository) {
    return new MyWorksViewModel(ordersRepository);
  }
}
